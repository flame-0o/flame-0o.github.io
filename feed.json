{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "subtitle": "于四季轮回中，静观花开花谢",
    "icon": "https://skmcj.top/images/favicon.ico",
    "description": "欢迎来到我的个人博客\\n(｡･ω･｡)，这里会分享我的一些学习经验和作品项目",
    "home_page_url": "https://skmcj.top",
    "items": [
        {
            "id": "https://skmcj.top/python/%E5%B0%8F%E7%99%BD%E5%AD%A6Python%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://skmcj.top/python/%E5%B0%8F%E7%99%BD%E5%AD%A6Python%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "小白学Python（一）",
            "date_published": "2021-08-08T16:00:00.000Z",
            "content_html": "<h1 id=\"小白学python一\"><a class=\"anchor\" href=\"#小白学python一\">#</a> 小白学 Python（一）</h1>\n<h2 id=\"输入输出\"><a class=\"anchor\" href=\"#输入输出\">#</a> 输入输出</h2>\n<p>待更新</p>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>待更新</p>\n<h2 id=\"简单数据类型\"><a class=\"anchor\" href=\"#简单数据类型\">#</a> 简单数据类型</h2>\n<p>待更新</p>\n<h2 id=\"第一个python程序\"><a class=\"anchor\" href=\"#第一个python程序\">#</a> 第一个 python 程序</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Python入门到入土",
                "python",
                "基础"
            ]
        },
        {
            "id": "https://skmcj.top/cpp/Dijkstra%E7%AE%97%E6%B3%95/",
            "url": "https://skmcj.top/cpp/Dijkstra%E7%AE%97%E6%B3%95/",
            "title": "Dijkstra算法",
            "date_published": "2021-08-05T16:00:00.000Z",
            "content_html": "<h1 id=\"dijkstra算法\"><a class=\"anchor\" href=\"#dijkstra算法\">#</a> Dijkstra 算法</h1>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>迪杰斯特拉算法 (Dijkstra) 是由荷兰计算机<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQTclOTElRTUlQUQlQTYlRTUlQUUlQjYvMTIxMDExNA==\">科学家</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOEIlODQlRTUlODUlOEIlRTYlOTYlQUYlRTclODklQjklRTYlOEIlODkvMjgyODg3Mg==\">狄克斯特拉</span>于 1959 年提出的，因此又叫狄克斯特拉算法。是从一个顶点到其余各顶点的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOUMlODAlRTclOUYlQUQlRTglQjclQUYlRTUlQkUlODQvNjMzNDkyMA==\">最短路径</span>算法，解决的是有权图中最短路径问题。迪杰斯特拉算法主要特点是从起始点开始，采用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQjQlQUElRTUlQkYlODMlRTclQUUlOTclRTYlQjMlOTUvNTQxMTgwMA==\">贪心算法</span>的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQUQlOTYlRTclOTUlQTUvNDAwNg==\">策略</span>，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止。</p>\n<p>Dijkstra 算法可用来求一个图中一个点到其他所有点的最短路径，时间复杂度为 O (n2)，可优化为 O (nlogn)。</p>\n<h3 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h3>\n<p><img data-src=\"https://gitee.com/skmcj-066/pic-bed/raw/master/img/20210808225823.png\" alt=\"案例\" height=\"350\" /></p>\n<p>如图，求源点 V1 到其它几个点的最短距离。</p>\n<h3 id=\"要点\"><a class=\"anchor\" href=\"#要点\">#</a> 要点</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> map<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 采用邻接链表的方式记录图信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> dis<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 用于存储源点到其它 n-1 个点的最短距离</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">bool</span> v<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>   <span class=\"token comment\">// 用于记录每个点的搜索状态，false 表示未搜</span></pre></td></tr></table></figure><p>从源点出发，每次找出 <code>dis</code>  中离源点最近的且未走过的点，替换出发点，更新 <code>dis</code>  的值。</p>\n<h3 id=\"算法详解\"><a class=\"anchor\" href=\"#算法详解\">#</a> 算法详解</h3>\n<p>首先用邻接矩阵存储图信息，如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> ∞ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着初始化 <code>dis</code>  数组，此时 <code>dis[0, 8, 2, ∞, ∞, 5, ∞]</code></p>\n<p>一开始 <code>start = 1</code> ，令 <code>v[1] = 1</code>  表示 V1 点已搜；接着遍历 <code>dis</code>  数组，找出当前距离源点最近且未搜的点，这里为 V3 (距离为 2)，令 <code>start = 3</code> ， <code>v[3] = 1</code> ；然后更新 <code>dis</code>  数组 (当 <code>dis[start] + map[start][i] &lt; dis[i]</code>  时，更新 <code>dis[i]</code>  的值)，为 <code>dis[0, 8, 2, 5, ∞, 5, 6]</code> 。</p>\n<p>重复上述步骤，依次如下：</p>\n<p><code>start = 4</code> ，更新为 <code>dis[0, 7, 2, 5, 9, 5, 6]</code> <br />\n <code>start = 6</code> ，更新为 <code>dis[0, 7, 2, 5, 9, 5, 6]</code> <br />\n <code>start = 7</code> ，更新为 <code>dis[0, 7, 2, 5, 8, 5, 6]</code> <br />\n <code>start = 2</code> ，更新为 <code>dis[0, 7, 2, 5, 8, 5, 6]</code> <br />\n <code>start = 5</code> ，更新为 <code>dis[0, 7, 2, 5, 8, 5, 6]</code></p>\n<p>直到所有点都搜索过，此时 <code>dis</code>  数组即为源点 V1 到各个点的最短距离。</p>\n<h3 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//n 表示点的个数，m 表示边的个数，s 表示源点编号，这题为 1，mins 用于找出最小值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> mins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> mp<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dis<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">bool</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 表示 a 到 b 有一条权值为 c 的边</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        mp<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 无向边</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 记录当前未搜最近点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化 dis</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    v<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 记录初始点已走</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    dis<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化，源点到源点自然是 0</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> k <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        mins <span class=\"token operator\">=</span> <span class=\"token number\">0x7fffffff</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 令 mins 为极大值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 遍历找出当前距离源点最近且未搜的点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                mins <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                t <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 用 t 记下来</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        v<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 记录 t 点搜索状态</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 更新 dis</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dis<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>mp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> mp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 输出最终结果</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"案例测试\"><a class=\"anchor\" href=\"#案例测试\">#</a> 案例测试</h3>\n<p><strong>输入数据</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">7</span> <span class=\"token number\">9</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">6</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token number\">4</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token number\">7</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5</span> <span class=\"token number\">7</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p><strong>输出结果</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token number\">7</span> <span class=\"token number\">2</span> <span class=\"token number\">5</span> <span class=\"token number\">8</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span></pre></td></tr></table></figure>",
            "tags": [
                "C与C++算法设计",
                "C++",
                "算法",
                "图论算法"
            ]
        },
        {
            "id": "https://skmcj.top/Java/java%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://skmcj.top/Java/java%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "java的基础知识（一）",
            "date_published": "2021-08-05T16:00:00.000Z",
            "content_html": "<h1 id=\"java的基础知识一\"><a class=\"anchor\" href=\"#java的基础知识一\">#</a> Java 的基础知识（一）</h1>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>本文适合有一定编程理念的小伙伴搭配☕️食用。</p>\n<p>刚开始学 Java，建立使用 Eclipse 作为开发平台。</p>\n<h2 id=\"输入输出\"><a class=\"anchor\" href=\"#输入输出\">#</a> 输入输出</h2>\n<p>Java 的输入输出主要按照流 (stream) 的模式来实现。其中数据的流向是按照计算机的方向确定的，流入计算机的数据流叫做输入流 (inputStream)，由计算机发出的数据流叫做输出流 (outputStream)。</p>\n<p>编写 java 程序时，使用到相应的类就要导入相应的包，用 <code>import</code>  导入 (用 Eclipse 编写时，可以忽略此操作，Eclipse 会自动帮你导入相应的包)。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">/******** 一个简单的例子 ********/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 实例化输入对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 定义 a 变量，类型为 int；并用 in 读入一个整数，赋给 a</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 输出 a</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// 建议写，可以不写</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/******************************/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h3>\n<p><strong>使用 Scanner 类</strong></p>\n<p>这是 Java5 的新特征，用来获取用户输入，是 java 比较常用、简单、用于输入的类，使用时需导入 <code>java.util.Scanner</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 Scanner 类获取输入，需先实例化一个 Scanner 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 接着调用 Scanner 类的方法读取输入，以下列出常用的一些方法：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 输入字符串，以空格结束</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 输入字符串，以 enter 结束</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 输入一个整数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 输入一个双精度数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 关闭此扫描仪</span></pre></td></tr></table></figure><p>更多方法可查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9tYW51YWwvamRrMTFhcGkvamF2YS5iYXNlL2phdmEvdXRpbC9TY2FubmVyLmh0bWw=\"> Class Scanner</span></p>\n<p><strong>使用 BufferedReader 类和 InputStreamReader 类</strong></p>\n<p>在 java 中，用于用于处理数据流的类，使用时需导入 <code>java.io.*</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首先实例化 BufferedReader 类对象，它附属于标准输入流 System.in</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">BufferedReader</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 接着调用方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 读入单个字符</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 读入一个文本行，通过识别‘\\n’(换行) 或‘\\r’(回车) 认为某行已终止</span></pre></td></tr></table></figure><h3 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h3>\n<p>java 的输出比较简单，常用语句如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 无换行输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 有换行输出</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"格式化字符串\"</span><span class=\"token punctuation\">,</span> 参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 延续 C 语言风格的输出函数，用法与 C 语言类似</span></pre></td></tr></table></figure><h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"定义形式\"><a class=\"anchor\" href=\"#定义形式\">#</a> 定义形式</h3>\n<p>[修饰符] &lt; 类型名称 &gt; &lt; 变量名称 &gt; = &lt; 初始值 &gt;;<br />\n <code>int a, b; // 同时定义两个变量</code> <br />\n <code>int a = 0; // 定义变量并赋值</code> <br />\n <code>int a, b = 100, c;</code></p>\n<p><code>final int a = 100; // 定义一个常量a，表示一旦初始化，值就不能修改了</code></p>\n<h3 id=\"类型名称\"><a class=\"anchor\" href=\"#类型名称\">#</a> 类型名称</h3>\n<p>Java 是一种<strong>强类型语言</strong>，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。</p>\n<ul>\n<li>\n<p><strong>基本数据类型</strong></p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>数据范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>16 位，存储 Unicode 码，用单引号赋值</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>只有 true 和 false 两个取值</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>8 位，最大存储数据量是 255，存放的数据范围是 - 128~127 之间</td>\n</tr>\n<tr>\n<td>short</td>\n<td>16 位，最大数据存储量是 65536，数据范围是 - 32768~32767 之间</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32 位，最大数据存储容量是 2 的 32 次方减 1，数据范围是负的 2 的 31 次方到正的 2 的 31 次方减 1</td>\n</tr>\n<tr>\n<td>long</td>\n<td>64 位，最大数据存储容量是 2 的 64 次方减 1，数据范围为负的 2 的 63 次方到正的 2 的 63 次方减 1</td>\n</tr>\n<tr>\n<td>float</td>\n<td>32 位，数据范围在 3.4e-45~1.4e38，直接赋值时必须在数字后加上 f 或 F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>64 位，数据范围在 4.9e-324~1.8e308，赋值时可以加 d 或 D 也可以不加</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p><strong>变量名称</strong>：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java 的保留字也不能用作标识符。</p>\n</li>\n<li>\n<p><strong>Java 的保留字列表</strong></p>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>do</th>\n<th>implements</th>\n<th>protected</th>\n<th>throws</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>double</td>\n<td>import</td>\n<td>public</td>\n<td>transient</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>instanceof</td>\n<td>return</td>\n<td>true</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>extends</td>\n<td>int</td>\n<td>short</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>false</td>\n<td>interface</td>\n<td>static</td>\n<td>while</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>final</td>\n<td>long</td>\n<td>strictfp</td>\n<td>void</td>\n</tr>\n<tr>\n<td>char</td>\n<td>finally</td>\n<td>native</td>\n<td>super</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>class</td>\n<td>float</td>\n<td>new</td>\n<td>switch</td>\n<td></td>\n</tr>\n<tr>\n<td>const*</td>\n<td>for</td>\n<td>null</td>\n<td>synchronized</td>\n<td></td>\n</tr>\n<tr>\n<td>continue</td>\n<td>goto*</td>\n<td>package</td>\n<td>this</td>\n<td></td>\n</tr>\n<tr>\n<td>default</td>\n<td>if</td>\n<td>private</td>\n<td>throw</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h2 id=\"数据运算\"><a class=\"anchor\" href=\"#数据运算\">#</a> 数据运算</h2>\n<h3 id=\"算术运算\"><a class=\"anchor\" href=\"#算术运算\">#</a> 算术运算</h3>\n<p>java 有 5 个算术运算符 <code>+ - * / %</code> ，可以和赋值运算符  <code>=</code>  结合起来，形成复合赋值运算。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">加法 - 相加运算符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:left\">减法 - 左操作数减去右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">乘法 - 相乘操作符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:left\">除法 - 左操作数除以右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">％</td>\n<td style=\"text-align:left\">取余 - 左操作数除以右操作数的余数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">++</td>\n<td style=\"text-align:left\">自增：操作数的值增加 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">--</td>\n<td style=\"text-align:left\">自减：操作数的值减少 1</td>\n</tr>\n</tbody>\n</table>\n<p>** 注意：** 两个运算符中间不要有空格。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>···</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>···</pre></td></tr></table></figure><h4 id=\"自增自减\"><a class=\"anchor\" href=\"#自增自减\">#</a> 自增 &amp; 自减</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自增 (值 + 1)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 先参与运算，后 + 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">++</span> a<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 先 + 1，后参与运算</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*** 举例子 ***/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> b <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果 a 为 1，b 为 2；先执行 a = b ，再执行 b + 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token operator\">++</span> b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果 a 为 2，b 为 2；先执行 b + 1 ，再执行 a = b</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/***********/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 自减 (值 - 1)，与自增一样</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">--</span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"强制类型转换\"><a class=\"anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h4>\n<p><strong>基本形式</strong></p>\n<ul>\n<li><code>(数据类型)变量或数据</code>   ：会把 <code>()</code>  右边第一个数据转换为 <code>()</code>  里面的数据类型。</li>\n</ul>\n<p><strong>注意</strong></p>\n<ul>\n<li>浮点数和整数放在一起运算时，Java 会将整数转换成浮点数，然后进行浮点数运算。</li>\n<li>强制性转换的优先级高于四则运算。</li>\n</ul>\n<p><strong>例子</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会报错，运算解果为 double，试图把一个 double 赋给一个 int</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确写法</span></pre></td></tr></table></figure><h3 id=\"关系运算\"><a class=\"anchor\" href=\"#关系运算\">#</a> 关系运算</h3>\n<p>Java 的关系运算符</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th>例子 (A=10,B=20)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>\n<td>(A == B) 为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>\n<td>(A != B)  为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:left\">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>\n<td>(A&gt; B) 为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:left\">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>\n<td>(A &lt; B) 为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:left\">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>\n<td>(A&gt;= B) 为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:left\">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>\n<td>(A &lt;= B) 为真。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h3>\n<p>Java 定义了位运算符，应用于整数类型 (int)，长整型 (long)，短整型 (short)，字符型 (char)，和字节型 (byte) 等类型。</p>\n<p>位运算符作用在所有的二进制位上，并且按位运算。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子 (A=60,B=13)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">＆</td>\n<td style=\"text-align:left\">如果相对应位都是 1，则结果为 1，否则为 0</td>\n<td style=\"text-align:left\">(A ＆ B) 得到 12 (0000 1100)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:left\">如果相对应位都是 0，则结果为 0，否则为 1</td>\n<td style=\"text-align:left\">(A | B) 得到 61 (0011 1101)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">如果相对应位值相同，则结果为 0，否则为 1</td>\n<td style=\"text-align:left\">(A ^ B) 得到 49 (0011 0001)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">〜</td>\n<td style=\"text-align:left\">按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0。</td>\n<td style=\"text-align:left\">(〜A) 得到 - 61 (1100 0011)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&lt;</td>\n<td style=\"text-align:left\">按位左移运算符。左操作数按位左移右操作数指定的位数。</td>\n<td style=\"text-align:left\">A &lt;&lt;2 得到 240 (1111 0000)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;</td>\n<td style=\"text-align:left\">按位右移运算符。左操作数按位右移右操作数指定的位数。</td>\n<td style=\"text-align:left\">A &gt;&gt; 2 得到 15 (1111)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;&gt;</td>\n<td style=\"text-align:left\">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>\n<td style=\"text-align:left\">A &gt;&gt;&gt; 2 得到 15 (0000 1111)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"逻辑运算\"><a class=\"anchor\" href=\"#逻辑运算\">#</a> 逻辑运算</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:center\">例子 (A 为真，B 为假)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&amp;&amp;</td>\n<td style=\"text-align:left\">逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>\n<td style=\"text-align:center\">(A &amp;&amp; B) 为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">||</td>\n<td style=\"text-align:left\">逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>\n<td style=\"text-align:center\">(A || B) 为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!</td>\n<td style=\"text-align:left\">逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 true，则逻辑非运算符将得到 false。</td>\n<td style=\"text-align:center\">!(A &amp;&amp; B) 为真。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"赋值运算\"><a class=\"anchor\" href=\"#赋值运算\">#</a> 赋值运算</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/=</td>\n<td style=\"text-align:left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">％=</td>\n<td style=\"text-align:left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&lt;=</td>\n<td style=\"text-align:left\">左移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;=</td>\n<td style=\"text-align:left\">右移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;=</td>\n<td style=\"text-align:left\">按位与赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^=</td>\n<td style=\"text-align:left\">按位异或赋值操作符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">|=</td>\n<td style=\"text-align:left\">按位或赋值操作符</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong> <code>a 运算符= b</code>  的形式等价于 <code>a = a y运算符 b</code></p>\n<h3 id=\"条件运算\"><a class=\"anchor\" href=\"#条件运算\">#</a> 条件运算</h3>\n<p><strong>也称三元运算符</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>关系表达式<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>为真时的结果<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>为假时的结果<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*** 小例子 ***/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">?</span> <span class=\"token number\">5</span> <span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//s 的结果为 6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/***********/</span></pre></td></tr></table></figure><h3 id=\"运算符优先级\"><a class=\"anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h3>\n<p>如下表，从上往下优先级逐渐降低</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">关联性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">后缀</td>\n<td style=\"text-align:center\">()  []  .  (点操作符)</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">一元</td>\n<td style=\"text-align:center\">expr++  expr--</td>\n<td style=\"text-align:left\">从左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">一元</td>\n<td style=\"text-align:center\">++expr  --expr  +  -  ～  ！</td>\n<td style=\"text-align:left\">从右到左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">乘性</td>\n<td style=\"text-align:center\">*  /  ％</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">加性</td>\n<td style=\"text-align:center\">+  -</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">移位</td>\n<td style=\"text-align:center\">&gt;&gt;  &gt;&gt;&gt;  &lt;&lt;</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">关系</td>\n<td style=\"text-align:center\">&gt;  &gt;=  &lt;  &lt;=</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">相等</td>\n<td style=\"text-align:center\">==  !=</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">按位与</td>\n<td style=\"text-align:center\">＆</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">按位异或</td>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">按位或</td>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">逻辑与</td>\n<td style=\"text-align:center\">&amp;&amp;</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">逻辑或</td>\n<td style=\"text-align:center\">||</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">条件</td>\n<td style=\"text-align:center\">?  :</td>\n<td style=\"text-align:left\">从右到左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">赋值</td>\n<td style=\"text-align:center\">=  +=  -=  *=  /=  ％=  &gt;&gt;=  &lt;&lt;=  ＆=  ^=  |=</td>\n<td style=\"text-align:left\">从右到左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">逗号</td>\n<td style=\"text-align:center\">,</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第一个java程序\"><a class=\"anchor\" href=\"#第一个java程序\">#</a> 第一个 Java 程序</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "java程序设计",
                "基础",
                "Java"
            ]
        }
    ]
}