{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "subtitle": "于四季轮回中，静观花开花谢",
    "icon": "https://skmcj.top/images/favicon.ico",
    "description": "不戚戚于贫贱，不汲汲于富贵",
    "home_page_url": "https://skmcj.top",
    "items": [
        {
            "id": "https://skmcj.top/Java/java%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89",
            "url": "https://skmcj.top/Java/java%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89",
            "title": "java的基础知识（三）",
            "date_published": "2021-08-28T16:00:00.000Z",
            "content_html": "<h1 id=\"java的基础知识三\"><a class=\"anchor\" href=\"#java的基础知识三\">#</a> java 的基础知识（三）</h1>\n<h2 id=\"for-循环\"><a class=\"anchor\" href=\"#for-循环\">#</a> for 循环</h2>\n<p><code>java</code>  的 <code>for循环</code> 同 <code>C/C++</code>  类似，基本形式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始化<span class=\"token punctuation\">;</span> 条件语句<span class=\"token punctuation\">;</span> 更新<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 执行流程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>程序进入一个 for 循环，首先执行初始化语句</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>接着判断条件，如果条件为 true，执行循环体</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>接着执行更新语句，然后在此执行条件语句，如果条件为 true，继续执行循环体</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>直到遇到条件为 false，就立刻退出当前 for 循环</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>关于 <code>for循环</code> 的几点说明：</p>\n<ul>\n<li><code>for循环</code> 适用于已知循环次数的循环</li>\n<li><code>for循环</code> 只有条件语句结果为 <code>true</code>  时，才会执行循环体，一旦条件为 <code>false</code> ，程序就会跳出循环，执行循环后面的语句</li>\n<li>更新条件一定要写好，保证程序是有限循环</li>\n</ul>\n<h3 id=\"for-each-循环\"><a class=\"anchor\" href=\"#for-each-循环\">#</a> for-each 循环</h3>\n<p>在 java 中，除了提供普通的 for 循环外，还提供了一种特殊的 for-each 循环，用来遍历数组或集合</p>\n<p>基本形式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> <span class=\"token keyword\">var</span><span class=\"token operator\">:</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 循环体 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 执行流程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>程序会依次取出 array 中的值，赋给 var 变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>循环体对 var 变量进行操作</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>相当于依次拿 array 里的值，执行循环体的语句</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>关于 <code>for-each循环</code> 的几点说明：</p>\n<ul>\n<li>变量 var 的类型 type 必须与数组 array 或集合的类型相同</li>\n<li>通过改变 var 变量的值并不能影响数组对应的值</li>\n</ul>\n<h3 id=\"案例展示\"><a class=\"anchor\" href=\"#案例展示\">#</a> 案例展示</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 输出结果</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>0 1 2 3 4 5 6 7 8 9</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 输出结果</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>0 1 2 3 4 5 6 7 8 9</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"while-循环\"><a class=\"anchor\" href=\"#while-循环\">#</a> while 循环</h2>\n<p>while 循环用于重复程序的一部分几次或重复执行一个代码块。 适用于迭代次数不固定的循环。</p>\n<p>基本形式为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 执行流程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>进入一个 while 循环，程序会先判断布尔表达式</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>如果结果为 true，执行循环体的内容</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>接着继续判断布尔表达式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>一旦为 false，就退出循环</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>否则，就一直执行循环体的内容</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>关于 <code>while循环</code> 的几点说明：</p>\n<ul>\n<li>循环最少执行 0 次，即一开始条件就不满足</li>\n<li>循环体内最好包含条件更新的语句，防止出现死循环</li>\n<li>一旦出现死循环，可以按<span class=\"kbd\"> Ctrl</span> + <span class=\"kbd\">C</span> 停止程序</li>\n</ul>\n<p><strong>案例展示</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    i <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 输出结果</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>0 1 2 3 4 5 6 7 8 9</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"dowhile-循环\"><a class=\"anchor\" href=\"#dowhile-循环\">#</a> do...while 循环</h2>\n<p>跟 <code>while循环</code> 类似的一种循环。</p>\n<p>基本形式为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 执行流程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>进入一个 while 循环，程序会先执行一遍循环体</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>接着判断布尔表达式，如果为 true，继续执行循环体</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>如果为 false，退出循环</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>关于 <code>do-while循环</code> 的几点说明：</p>\n<ul>\n<li>循环最少执行 1 次，不管条件如何</li>\n<li>循环后需要用分号 <code>;</code>  结尾</li>\n</ul>\n<p><strong>案例展示</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    i <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 输出结果</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>0 1 2 3 4 5 6 7 8 9</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"练手小程序\"><a class=\"anchor\" href=\"#练手小程序\">#</a> 练手小程序</h2>\n<p><img data-src=\"https://gitee.com/skmcj-066/pic-bed/raw/master/img/20210817162949.png\" alt=\"九九乘法表\" /></p>\n<p>如图，编写打印一个九九乘法表。</p>\n<p>。</p>\n<p>。</p>\n<p>。</p>\n<p>。</p>\n<p>。</p>\n<p>。</p>\n<p><strong>参考代码</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> j<span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "java程序设计",
                "Java",
                "基础"
            ]
        },
        {
            "id": "https://skmcj.top/Java/java%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89",
            "url": "https://skmcj.top/Java/java%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89",
            "title": "java的基础知识（二）",
            "date_published": "2021-08-14T16:00:00.000Z",
            "content_html": "<h1 id=\"java的基础知识二\"><a class=\"anchor\" href=\"#java的基础知识二\">#</a> Java 的基础知识（二）</h1>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>本文主要介绍 java 的分支结构。</p>\n<p>java 的分支结构主要有两种， <code>if语句</code> 和 <code>switch语句</code> 。</p>\n<h2 id=\"if语句\"><a class=\"anchor\" href=\"#if语句\">#</a> if... 语句</h2>\n<p>一个 <code>if...语句</code> 包含一个布尔表达式和执行语句块。</p>\n<p>基本形式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表示式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 布尔表达式结果为 true 时执行的语句块</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 当执行语句只有一句时，也可以写成以下形式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span> 一条执行语句<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 但是，不管只有一条语句还是存在多条，都推荐使用带 &#123;&#125; 的格式，能够更好地体现代码层级关系</span></pre></td></tr></table></figure><p><strong>案例展示</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我已经成年了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* 运行结果</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>我已经成年了</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"ifelse语句\"><a class=\"anchor\" href=\"#ifelse语句\">#</a> if...else... 语句</h2>\n<p><code>if...</code>  语句后面可以跟  <code>else...</code>  语句，当 <code>if...</code>  语句的布尔表达式值为  <code>false</code>  时，else 语句块会被执行。</p>\n<p>基本形式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 布尔表达式结果为 true 时执行的语句块</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 布尔表达式结果为 false 时执行的语句块</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>案例展示</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我已经成年了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我还未成年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 运行结果</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>我还未成年</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"ifelse-ifelse语句\"><a class=\"anchor\" href=\"#ifelse-ifelse语句\">#</a> if...else if...else... 语句</h2>\n<p>当简单的 <code>是否</code> 满足不了需求时，就可以使用 <code>else if...</code>  语句来扩充分支。</p>\n<p>基本形式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 布尔表达式 1 结果为 true 时执行的语句块</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 布尔表达式 2 结果为 true 时执行的语句块</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>······</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 布尔表达式 n 结果为 true 时执行的语句块</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 前面所有布尔表达式结果均为 false 时执行的语句块</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>案例展示</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">==</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"而立之年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">==</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不惑之年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">==</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"知命之年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">==</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"耳顺之年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">==</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古稀之年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不知几年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/* 运行结果</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>而立之年</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"嵌套的if语句\"><a class=\"anchor\" href=\"#嵌套的if语句\">#</a> 嵌套的 if... 语句</h2>\n<p>当我们想对一个分支继续分出更多小的分支时，就可以使用嵌套的 <code>if...</code>  语句。</p>\n<p>基本形式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 布尔表达式 2 结果为 true 时执行的语句块</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 布尔表达式 1 结果为 true，布尔表达式 2 结果为 false 时执行的语句块</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 布尔表达式 1 结果为 false 是执行的语句块</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 以上只是简单介绍基本的嵌套方式，使用时可以根据实际场景进行随意组合嵌套</span></pre></td></tr></table></figure><p><strong>案例展示</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> rmb <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rmb <span class=\"token operator\">>=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rmb <span class=\"token operator\">!=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一张一百\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一张五十\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rmb <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rmb <span class=\"token operator\">>=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rmb <span class=\"token operator\">!=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一张十元\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一张五元\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一张一元\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一张二十\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/* 运行结果</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>这是一张一百</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"switch语句\"><a class=\"anchor\" href=\"#switch语句\">#</a> switch 语句</h2>\n<p><code>swith语句</code> 是由一个控制表达式和多个 <code>case</code>  标签组成，当控制表达式值与某个 <code>case</code>  后的常量相等时，执行 <code>case</code>  后的语句。每个 <code>case</code>  为一个分支。</p>\n<p>基本形式为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">case</span> value1 <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token comment\">// 语句或函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可省略，省略时将依次执行下一个 case 语句后的语句，直到遇到 break 或没有 case 语句，才退出 switch</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">case</span> value2 <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token comment\">// 语句或函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 任意数量的 case 语句</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token comment\">// 表示当前面的 case 都不满足时执行，可省略</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token comment\">// 语句或函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 <code>switch</code>  需遵循如下规则：</p>\n<ul>\n<li><code>switch</code>  语句中的变量类型只能为  <code>byte</code> 、 <code>short</code> 、 <code>int</code>  或者  <code>char</code> 。从 <strong>Java SE 7</strong> 开始， <code>switch</code>  支持字符串  <code>String</code>  类型了，同时  <code>case</code>  标签必须为字符串常量或字面量。</li>\n<li><code>switch</code>  语句可以拥有多个  <code>case</code>  语句。每个  <code>case</code>  后面跟一个要比较的值和冒号。</li>\n<li><code>case</code>  语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li>\n<li>当变量的值与  <code>case</code>  语句的值相等时，那么  <code>case</code>  语句之后的语句开始执行，直到 <code>break</code>  语句出现才会跳出  <code>switch</code>  语句。</li>\n<li>当遇到  <code>break</code>  语句时， <code>switch</code>  语句终止。程序跳转到  <code>switch</code>  语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有  <code>break</code>  语句出现，程序会继续执行下一条  <code>case</code>  语句，直到出现  <code>break</code>  语句。</li>\n<li><code>switch</code>  语句可以包含一个  <code>default</code>  分支，该分支必须是  <code>switch</code>  语句的最后一个分支。 <code>default</code>  在没有  <code>case</code>  语句的值和变量值相等的时候执行。 <code>default</code>  分支不需要  <code>break</code>  语句。</li>\n</ul>\n<p><strong>案例展示</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> level <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"耗能低\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"耗能高\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* 运行结果</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>耗能低</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>*/</span></pre></td></tr></table></figure>",
            "tags": [
                "java程序设计",
                "Java",
                "基础"
            ]
        },
        {
            "id": "https://skmcj.top/python/%E5%B0%8F%E7%99%BD%E5%AD%A6Python%EF%BC%88%E4%BA%8C%EF%BC%89",
            "url": "https://skmcj.top/python/%E5%B0%8F%E7%99%BD%E5%AD%A6Python%EF%BC%88%E4%BA%8C%EF%BC%89",
            "title": "小白学Python（二）",
            "date_published": "2021-08-13T16:00:00.000Z",
            "content_html": "<h1 id=\"小白学python二\"><a class=\"anchor\" href=\"#小白学python二\">#</a> 小白学 Python（二）</h1>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p><code>Python</code>  是一门遵循严格的代码缩进的编程语言。</p>\n<p>跟其它语言用 <code>&#123;&#125;</code>  来区分代码块类似， <code>Python</code>  是用冒号 <code>:</code>  和缩进来区分代码块 (冒号后相同缩进量为同一代码块)。</p>\n<p>一般情况下，一个<span class=\"kbd\"> Tab</span> 键就是一个缩进量 (即四个空格)。</p>\n<h2 id=\"分支结构\"><a class=\"anchor\" href=\"#分支结构\">#</a> 分支结构</h2>\n<p>和其它编程语言不同的是，python 的分支结构 (在 <code>3.10</code>  之前的版本)，只有 <code>if 语句</code> 。</p>\n<p>Python 程序语言指定任何非 0 和非空（null）值为 true，0 或者 null 为 false。</p>\n<h3 id=\"基本形式\"><a class=\"anchor\" href=\"#基本形式\">#</a> 基本形式</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">''' *单条 if 语句* '''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token operator\">&lt;</span>判断表达式<span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    执行语句块          <span class=\"token comment\"># 语句块的每个语句的缩进量必须相同</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token triple-quoted-string string\">''' *if...else 语句* '''</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token operator\">&lt;</span>判断表达式<span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    执行语句块          <span class=\"token comment\"># 判断表达式结果为 true 时执行的语句块</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    执行语句块          <span class=\"token comment\"># 判断表达式结果为 false 时执行的语句块</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token triple-quoted-string string\">''' *if...elif..else 语句* '''</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token operator\">&lt;</span>判断表达式<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    执行语句块          <span class=\"token comment\"># 判断表达式 1 结果为 true 时执行的语句块</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token operator\">&lt;</span>判断表达式<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    执行语句块          <span class=\"token comment\"># 判断表达式 2 结果为 true 时执行的语句块</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 任意数量的 elif 语句</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    执行语句块          <span class=\"token comment\"># 以上判断表达式结果均为 false 时执行的语句块</span></pre></td></tr></table></figure><h3 id=\"案例展示\"><a class=\"anchor\" href=\"#案例展示\">#</a> 案例展示</h3>\n<p><strong>案例一</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">''' *单条 if 语句* '''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我已经成年了\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>案例二</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">''' *if...else 语句* '''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token operator\">&lt;</span>判断表达式<span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我已经成年了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我还未成年\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>案例三</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">''' *if...elif..else 语句* '''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请分别输入三角形的三条边：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> a<span class=\"token operator\">+</span>b <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这不是个三角形\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">elif</span> a<span class=\"token operator\">+</span>c <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这不是个三角形\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">elif</span> b<span class=\"token operator\">+</span>c <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这不是个三角形\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是个三角形\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"循环结构\"><a class=\"anchor\" href=\"#循环结构\">#</a> 循环结构</h2>\n<h3 id=\"for-循环\"><a class=\"anchor\" href=\"#for-循环\">#</a> for 循环</h3>\n<p>for 循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 依次输出 'Python' 的每一个字符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token string\">'Python'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 依次输出 [0,n) 之间的数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>除了普通的用法外， <code>Python</code>  还有一种 <code>for...else</code>  的用法。</p>\n<p>其中，else 中的语句会在循环正常执行完 (即 for 不是通过 break 跳出而中断的) 后执行。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 判断 2 到 99 之间的数，哪个是质数，哪个不是</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>              <span class=\"token comment\"># 产生一个包含 1~99 的数的序列</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">if</span> num<span class=\"token operator\">%</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>                   <span class=\"token comment\"># 判断 num 除了 1 和其本身之外，是否还有其它因数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d 不是一个质数'</span> <span class=\"token operator\">%</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'%d 是一个质数'</span> <span class=\"token operator\">%</span> num<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"while-循环\"><a class=\"anchor\" href=\"#while-循环\">#</a> while 循环</h3>\n<p>while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 基本形式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> 判断表达式<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    循环体</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 案例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重要的事情说三遍\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>while</code>  也有如 <code>for</code>  一样的特殊用法，即 <code>while...else</code>  用法，具体方法和 <code>for</code>  类似。</p>\n<p><strong>注意：</strong> 在写 while 语句时，一定要注意循环停止条件，否则容易造成死循环；当遇到死循环时，可通过快捷键<span class=\"kbd\"> Ctrl</span> + <span class=\"kbd\">C</span> 停止程序。</p>\n<h3 id=\"重要命令\"><a class=\"anchor\" href=\"#重要命令\">#</a> 重要命令</h3>\n<p><code>break</code>  ——  跳出当前循环</p>\n<p><code>continue</code>  ——  跳过此次循环</p>\n",
            "tags": [
                "Python入门到入土",
                "基础",
                "python"
            ]
        },
        {
            "id": "https://skmcj.top/python/%E5%B0%8F%E7%99%BD%E5%AD%A6Python%EF%BC%88%E4%B8%80%EF%BC%89",
            "url": "https://skmcj.top/python/%E5%B0%8F%E7%99%BD%E5%AD%A6Python%EF%BC%88%E4%B8%80%EF%BC%89",
            "title": "小白学Python（一）",
            "date_published": "2021-08-08T16:00:00.000Z",
            "content_html": "<h1 id=\"小白学python一\"><a class=\"anchor\" href=\"#小白学python一\">#</a> 小白学 Python（一）</h1>\n<h2 id=\"输入输出\"><a class=\"anchor\" href=\"#输入输出\">#</a> 输入输出</h2>\n<h3 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h3>\n<p>Python 主要使用 <code>input()</code>  函数来存入用户输入的信息。</p>\n<p><code>input()</code>  函数默认读入信息类型为字符串</p>\n<p><strong>案例展示</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 读入单个数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入内容：\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># python 输入的一般形式，双引号内为提示信息，可以省略</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>请输入内容：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一个整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 要求输入一个整数，输入字符会出错，其实原理是将输入的数字符号转换为 int 型数据，int 可改为其它数据类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>请输入一个整数：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 读入多个数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请分别输入三个数据：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># python 读入多个数据的方法，原理是将读入的数据整合成一个列表，然后将里面的数据依次赋给前面的变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>请分别输入三个数据：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请分别输入三个整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 如果需要读入多个整数，需要借助 map () 函数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>请分别输入三个整数：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>'''</span></pre></td></tr></table></figure><h3 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h3>\n<p>Python 的输出主要属于 <code>print()</code>  函数实现。</p>\n<p><code>print()</code>  函数的语法为： <code>print(*objects, sep=' ', end='\\n', file=sys.stdout)</code></p>\n<p><strong>具体含义如下：</strong></p>\n<p><code>*objects</code>  -- 表示输出的对象，多个对象用逗号分隔。</p>\n<p><code>sep</code>  --  用来间隔多个输出对象，默认为空格。</p>\n<p><code>end</code>  --  用来设定以什么结尾。默认值是换行符 \\n，我们可以换成其他字符包括空字符。</p>\n<p><code>file</code>  --  要写入的文件对象，输出到终端时可省略。</p>\n<h4 id=\"简单输出\"><a class=\"anchor\" href=\"#简单输出\">#</a> 简单输出</h4>\n<p><strong>案例展示</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 输出一个字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Hello World!</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 输出多个内容，内容间用，分隔，输出内容以空格分隔</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>你好 World</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">999</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> sep <span class=\"token operator\">=</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 输出变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>999,hello</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>'''</span></pre></td></tr></table></figure><h4 id=\"格式化输出\"><a class=\"anchor\" href=\"#格式化输出\">#</a> 格式化输出</h4>\n<p>python 的格式化输出主要通过占位符来控制</p>\n<p><strong>三种常用的占位符：</strong></p>\n<ul>\n<li>%</li>\n<li>format()</li>\n<li>f 表达式</li>\n</ul>\n<p><code>%</code>  可根据指定格式对字符串进行格式化。</p>\n<p>具体语法为： <code>%[key][flags][width][.precision][length type]conversion type %values</code></p>\n<p>名词含义可参照<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXRob24tcmVmZXJlbmNlLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC9kb2NzL3N0ci9mb3JtYXR0aW5nLmh0bWw=\"> % (String Formatting Operator)</span></p>\n<p><strong>案例展示</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>car <span class=\"token operator\">=</span> <span class=\"token string\">\"汽车\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"如果有%d辆%s\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># % s，% d 就是占位符，会把占住的位置替换为后边变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>如果有1辆汽车</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%x'</span> <span class=\"token operator\">%</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 输出 20 的 16 进制形式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>14</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>'''</span></pre></td></tr></table></figure><p>上面的 <code>%d</code> 、 <code>%s</code> 、 <code>%x</code>  都是 <code>%</code>  占位符的一种，类似的还有</p>\n<ul>\n<li><code>%o</code>  ——  八进制</li>\n<li><code>%d</code>  ——  十进制</li>\n<li><code>%f</code>  ——  保留小数点后面六位有效数字<br />\n　-  <code>%.3f</code> ，保留 3 位小数位</li>\n<li><code>%e</code>  ——  保留小数点后面六位有效数字，指数形式输出\n<ul>\n<li><code>%.3e</code> ，保留 3 位小数位，使用科学计数法</li>\n</ul>\n</li>\n<li><code>%g</code>  ——  在保证六位有效数字的前提下，使用小数方式，否则使用科学计数法<br />\n　 -  <code>%.3g</code> ，保留 3 位有效数字，使用小数或科学计数法</li>\n<li><code>%s</code>  ——  字符串\n<ul>\n<li><code>%10s</code>  ——  右对齐，占位符 10 位</li>\n<li><code>%-10s</code>  ——  左对齐，占位符 10 位</li>\n<li><code>%.2s</code>  ——  截取 2 位字符串</li>\n<li><code>%10.2s</code>   ——  10 位占位符，截取两位字符串</li>\n</ul>\n</li>\n</ul>\n<p>······</p>\n<p>以上信息并不全面，更多内容可以自行上网搜索</p>\n<p><code>format</code>  占位符一般形式为 <code>str.format()</code> ，可根据 str 格式字符串对 format () 里的变量进行格式化</p>\n<p><strong>案例展示</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;网址：&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"75%问题解决方案\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 括号及其里面的字符 (称作格式化字段) 将会被 format () 中的参数替换</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>%75问题解决方案网址：https://www.baidu.com</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;name&#125;网址：&#123;site&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'75%问题解决方案'</span><span class=\"token punctuation\">,</span> site<span class=\"token operator\">=</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># format () 也可以使用关键字参数，用来指向使用该名字的参数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>%75问题解决方案网址：https://www.baidu.com</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0&#125;网址：&#123;1&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'75%问题解决方案'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 或者也可以使用位置参数进行指向</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>%75问题解决方案网址：https://www.baidu.com</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 位置及关键字参数可以任意的结合</span></pre></td></tr></table></figure><p><code>&#123;&#125;</code>  格式化字段的用法还有很多，有兴趣的朋友可以自行百度</p>\n<p><code>f表达式</code> 的一般使用形式为： <code>f'格式化字符串'</code>  或 <code>F'格式化字符串'</code></p>\n<p><strong>案例展示</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>car <span class=\"token operator\">=</span> <span class=\"token string\">'汽车'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'如果有</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>num<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">辆</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>car<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># &#123;&#125; 包裹的是替换字段，相当于上面的占位符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>如果有1辆汽车</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>'''</span></pre></td></tr></table></figure><p><code>f表达式</code> 还有很多高深用法，需要可自行百度</p>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>与其他编程语言不同，Python 没有声明变量的命令</p>\n<p>只有首次为其赋值时，才会创建变量</p>\n<p>变量也不需要使用任何特定类型声明，甚至可以在设置后更改其类型</p>\n<p>字符串变量可以使用单引号或双引号进行声明</p>\n<p><strong>Python 变量命名规则：</strong></p>\n<ul>\n<li>变量名必须以字母或下划线字符开头</li>\n<li>变量名称不能以数字开头</li>\n<li>变量名只能包含字母数字字符和下划线（A-z、0-9 和 _）</li>\n<li>变量名称区分大小写（age、Age 和 AGE 是三个不同的变量）</li>\n</ul>\n<p>有意思的是：python 的变量名可以为中文，不会报错，且能正常使用，不过建议不要这么做</p>\n<p><strong>案例展示</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"cat\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>十 <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>十<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token triple-quoted-string string\">'''运行结果</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>hello world</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>cat</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>10</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>'''</span></pre></td></tr></table></figure><p><strong>全局变量：</strong> 在函数外部创建的变量。全局变量可以被函数内部和外部的每个人使用。</p>\n<p><strong>局部变量：</strong> 通常，在函数内部创建变量时，该变量是局部变量，只能在该函数内部使用。要在函数内部创建全局变量，您可以使用 global 关键字。</p>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>在 Python 中，单行注释用井号 <code>#</code> 标识。如 <code># 这是一行注释</code> 。</p>\n<p>多行注释用 <code>&quot;&quot;&quot;   &quot;&quot;&quot;</code>  或 <code>'''   '''</code>  标识。如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这是多行注释</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>是多行注释</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>多行注释</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>行注释</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>注释</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>释</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>这是多行注释</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>是多行注释</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>多行注释</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>行注释</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>注释</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>释</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>'''</span></pre></td></tr></table></figure><h2 id=\"python之禅\"><a class=\"anchor\" href=\"#python之禅\">#</a> Python 之禅</h2>\n<p>Python 之禅包含了 python 社区的理念。</p>\n<p>只要你在解释器输入 <code>import this</code> ，就会出现 python 之禅的内容。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">import</span> this</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>The Zen of Python<span class=\"token punctuation\">,</span> by Tim Peters</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Beautiful <span class=\"token keyword\">is</span> better than ugly<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Explicit <span class=\"token keyword\">is</span> better than implicit<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Simple <span class=\"token keyword\">is</span> better than <span class=\"token builtin\">complex</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Complex <span class=\"token keyword\">is</span> better than complicated<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Flat <span class=\"token keyword\">is</span> better than nested<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Sparse <span class=\"token keyword\">is</span> better than dense<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Readability counts<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Special cases aren't special enough to <span class=\"token keyword\">break</span> the rules<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Although practicality beats purity<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Errors should never <span class=\"token keyword\">pass</span> silently<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Unless explicitly silenced<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>In the face of ambiguity<span class=\"token punctuation\">,</span> refuse the temptation to guess<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>There should be one<span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token keyword\">and</span> preferably only one <span class=\"token operator\">-</span><span class=\"token operator\">-</span>obvious way to do it<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Although that way may <span class=\"token keyword\">not</span> be obvious at first unless you're Dutch<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Now <span class=\"token keyword\">is</span> better than never<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Although never <span class=\"token keyword\">is</span> often better than <span class=\"token operator\">*</span>right<span class=\"token operator\">*</span> now<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>If the implementation <span class=\"token keyword\">is</span> hard to explain<span class=\"token punctuation\">,</span> it's a bad idea<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>If the implementation <span class=\"token keyword\">is</span> easy to explain<span class=\"token punctuation\">,</span> it may be a good idea<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Namespaces are one honking great idea <span class=\"token operator\">-</span><span class=\"token operator\">-</span> let's do more of those!</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token triple-quoted-string string\">'''******************************************翻译为******************************************'''</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Python之禅 by Tim Peters</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>优美胜于丑陋（Python 以编写优美的代码为目标）</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>可读性很重要（优美的代码是可读的）</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>当存在多种可能，不要尝试去猜测</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>'''</span></pre></td></tr></table></figure><h2 id=\"第一个python程序\"><a class=\"anchor\" href=\"#第一个python程序\">#</a> 第一个 python 程序</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Python入门到入土",
                "基础",
                "python"
            ]
        },
        {
            "id": "https://skmcj.top/Java/java%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89",
            "url": "https://skmcj.top/Java/java%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89",
            "title": "java的基础知识（一）",
            "date_published": "2021-08-05T16:00:00.000Z",
            "content_html": "<h1 id=\"java的基础知识一\"><a class=\"anchor\" href=\"#java的基础知识一\">#</a> Java 的基础知识（一）</h1>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>本文适合有一定编程理念的小伙伴搭配☕️食用。</p>\n<p>刚开始学 Java，建立使用 Eclipse 作为开发平台。</p>\n<h2 id=\"输入输出\"><a class=\"anchor\" href=\"#输入输出\">#</a> 输入输出</h2>\n<p>Java 的输入输出主要按照流 (stream) 的模式来实现。其中数据的流向是按照计算机的方向确定的，流入计算机的数据流叫做输入流 (inputStream)，由计算机发出的数据流叫做输出流 (outputStream)。</p>\n<p>编写 java 程序时，使用到相应的类就要导入相应的包，用 <code>import</code>  导入 (用 Eclipse 编写时，可以忽略此操作，Eclipse 会自动帮你导入相应的包)。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">/******** 一个简单的例子 ********/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 实例化输入对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 定义 a 变量，类型为 int；并用 in 读入一个整数，赋给 a</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 输出 a</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// 建议写，可以不写</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/******************************/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h3>\n<p><strong>使用 Scanner 类</strong></p>\n<p>这是 Java5 的新特征，用来获取用户输入，是 java 比较常用、简单、用于输入的类，使用时需导入 <code>java.util.Scanner</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 Scanner 类获取输入，需先实例化一个 Scanner 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 接着调用 Scanner 类的方法读取输入，以下列出常用的一些方法：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 输入字符串，以空格结束</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 输入字符串，以 enter 结束</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 输入一个整数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 输入一个双精度数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 关闭此扫描仪</span></pre></td></tr></table></figure><p>更多方法可查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9tYW51YWwvamRrMTFhcGkvamF2YS5iYXNlL2phdmEvdXRpbC9TY2FubmVyLmh0bWw=\"> Class Scanner</span></p>\n<p><strong>使用 BufferedReader 类和 InputStreamReader 类</strong></p>\n<p>在 java 中，用于用于处理数据流的类，使用时需导入 <code>java.io.*</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首先实例化 BufferedReader 类对象，它附属于标准输入流 System.in</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">BufferedReader</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 接着调用方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 读入单个字符</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 读入一个文本行，通过识别‘\\n’(换行) 或‘\\r’(回车) 认为某行已终止</span></pre></td></tr></table></figure><h3 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h3>\n<p>java 的输出比较简单，常用语句如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 无换行输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 有换行输出</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"格式化字符串\"</span><span class=\"token punctuation\">,</span> 参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 延续 C 语言风格的输出函数，用法与 C 语言类似</span></pre></td></tr></table></figure><h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"定义形式\"><a class=\"anchor\" href=\"#定义形式\">#</a> 定义形式</h3>\n<p>[修饰符] &lt; 类型名称 &gt; &lt; 变量名称 &gt; = &lt; 初始值 &gt;;<br />\n <code>int a, b; // 同时定义两个变量</code> <br />\n <code>int a = 0; // 定义变量并赋值</code> <br />\n <code>int a, b = 100, c;</code></p>\n<p><code>final int a = 100; // 定义一个常量a，表示一旦初始化，值就不能修改了</code></p>\n<h3 id=\"类型名称\"><a class=\"anchor\" href=\"#类型名称\">#</a> 类型名称</h3>\n<p>Java 是一种<strong>强类型语言</strong>，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。</p>\n<ul>\n<li>\n<p><strong>基本数据类型</strong></p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>数据范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>16 位，存储 Unicode 码，用单引号赋值</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>只有 true 和 false 两个取值</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>8 位，最大存储数据量是 255，存放的数据范围是 - 128~127 之间</td>\n</tr>\n<tr>\n<td>short</td>\n<td>16 位，最大数据存储量是 65536，数据范围是 - 32768~32767 之间</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32 位，最大数据存储容量是 2 的 32 次方减 1，数据范围是负的 2 的 31 次方到正的 2 的 31 次方减 1</td>\n</tr>\n<tr>\n<td>long</td>\n<td>64 位，最大数据存储容量是 2 的 64 次方减 1，数据范围为负的 2 的 63 次方到正的 2 的 63 次方减 1</td>\n</tr>\n<tr>\n<td>float</td>\n<td>32 位，数据范围在 3.4e-45~1.4e38，直接赋值时必须在数字后加上 f 或 F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>64 位，数据范围在 4.9e-324~1.8e308，赋值时可以加 d 或 D 也可以不加</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p><strong>变量名称</strong>：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java 的保留字也不能用作标识符。</p>\n</li>\n<li>\n<p><strong>Java 的保留字列表</strong></p>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>do</th>\n<th>implements</th>\n<th>protected</th>\n<th>throws</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>double</td>\n<td>import</td>\n<td>public</td>\n<td>transient</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>instanceof</td>\n<td>return</td>\n<td>true</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>extends</td>\n<td>int</td>\n<td>short</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>false</td>\n<td>interface</td>\n<td>static</td>\n<td>while</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>final</td>\n<td>long</td>\n<td>strictfp</td>\n<td>void</td>\n</tr>\n<tr>\n<td>char</td>\n<td>finally</td>\n<td>native</td>\n<td>super</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>class</td>\n<td>float</td>\n<td>new</td>\n<td>switch</td>\n<td></td>\n</tr>\n<tr>\n<td>const*</td>\n<td>for</td>\n<td>null</td>\n<td>synchronized</td>\n<td></td>\n</tr>\n<tr>\n<td>continue</td>\n<td>goto*</td>\n<td>package</td>\n<td>this</td>\n<td></td>\n</tr>\n<tr>\n<td>default</td>\n<td>if</td>\n<td>private</td>\n<td>throw</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h2 id=\"数据运算\"><a class=\"anchor\" href=\"#数据运算\">#</a> 数据运算</h2>\n<h3 id=\"算术运算\"><a class=\"anchor\" href=\"#算术运算\">#</a> 算术运算</h3>\n<p>java 有 5 个算术运算符 <code>+ - * / %</code> ，可以和赋值运算符  <code>=</code>  结合起来，形成复合赋值运算。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">加法 - 相加运算符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:left\">减法 - 左操作数减去右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">乘法 - 相乘操作符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:left\">除法 - 左操作数除以右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">％</td>\n<td style=\"text-align:left\">取余 - 左操作数除以右操作数的余数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">++</td>\n<td style=\"text-align:left\">自增：操作数的值增加 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">--</td>\n<td style=\"text-align:left\">自减：操作数的值减少 1</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong> 两个运算符中间不要有空格。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>···</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>···</pre></td></tr></table></figure><h4 id=\"自增自减\"><a class=\"anchor\" href=\"#自增自减\">#</a> 自增 &amp; 自减</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自增 (值 + 1)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 先参与运算，后 + 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">++</span> a<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 先 + 1，后参与运算</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*** 举例子 ***/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> b <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果 a 为 1，b 为 2；先执行 a = b ，再执行 b + 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token operator\">++</span> b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果 a 为 2，b 为 2；先执行 b + 1 ，再执行 a = b</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/***********/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 自减 (值 - 1)，与自增一样</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">--</span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"强制类型转换\"><a class=\"anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h4>\n<p><strong>基本形式</strong></p>\n<ul>\n<li><code>(数据类型)变量或数据</code>   ：会把 <code>()</code>  右边第一个数据转换为 <code>()</code>  里面的数据类型。</li>\n</ul>\n<p><strong>注意</strong></p>\n<ul>\n<li>浮点数和整数放在一起运算时，Java 会将整数转换成浮点数，然后进行浮点数运算。</li>\n<li>强制性转换的优先级高于四则运算。</li>\n</ul>\n<p><strong>例子</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会报错，运算解果为 double，试图把一个 double 赋给一个 int</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确写法</span></pre></td></tr></table></figure><h3 id=\"关系运算\"><a class=\"anchor\" href=\"#关系运算\">#</a> 关系运算</h3>\n<p>Java 的关系运算符</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th>例子 (A=10,B=20)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>\n<td>(A == B) 为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>\n<td>(A != B)  为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:left\">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>\n<td>(A&gt; B) 为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:left\">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>\n<td>(A &lt; B) 为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:left\">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>\n<td>(A&gt;= B) 为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:left\">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>\n<td>(A &lt;= B) 为真。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h3>\n<p>Java 定义了位运算符，应用于整数类型 (int)，长整型 (long)，短整型 (short)，字符型 (char)，和字节型 (byte) 等类型。</p>\n<p>位运算符作用在所有的二进制位上，并且按位运算。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">例子 (A=60,B=13)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">＆</td>\n<td style=\"text-align:left\">如果相对应位都是 1，则结果为 1，否则为 0</td>\n<td style=\"text-align:left\">(A ＆ B) 得到 12 (0000 1100)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:left\">如果相对应位都是 0，则结果为 0，否则为 1</td>\n<td style=\"text-align:left\">(A | B) 得到 61 (0011 1101)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">如果相对应位值相同，则结果为 0，否则为 1</td>\n<td style=\"text-align:left\">(A ^ B) 得到 49 (0011 0001)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">〜</td>\n<td style=\"text-align:left\">按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0。</td>\n<td style=\"text-align:left\">(〜A) 得到 - 61 (1100 0011)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&lt;</td>\n<td style=\"text-align:left\">按位左移运算符。左操作数按位左移右操作数指定的位数。</td>\n<td style=\"text-align:left\">A &lt;&lt;2 得到 240 (1111 0000)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;</td>\n<td style=\"text-align:left\">按位右移运算符。左操作数按位右移右操作数指定的位数。</td>\n<td style=\"text-align:left\">A &gt;&gt; 2 得到 15 (1111)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;&gt;</td>\n<td style=\"text-align:left\">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>\n<td style=\"text-align:left\">A &gt;&gt;&gt; 2 得到 15 (0000 1111)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"逻辑运算\"><a class=\"anchor\" href=\"#逻辑运算\">#</a> 逻辑运算</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:center\">例子 (A 为真，B 为假)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&amp;&amp;</td>\n<td style=\"text-align:left\">逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>\n<td style=\"text-align:center\">(A &amp;&amp; B) 为假。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">||</td>\n<td style=\"text-align:left\">逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>\n<td style=\"text-align:center\">(A || B) 为真。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!</td>\n<td style=\"text-align:left\">逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 true，则逻辑非运算符将得到 false。</td>\n<td style=\"text-align:center\">!(A &amp;&amp; B) 为真。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"赋值运算\"><a class=\"anchor\" href=\"#赋值运算\">#</a> 赋值运算</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/=</td>\n<td style=\"text-align:left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">％=</td>\n<td style=\"text-align:left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&lt;=</td>\n<td style=\"text-align:left\">左移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;=</td>\n<td style=\"text-align:left\">右移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;=</td>\n<td style=\"text-align:left\">按位与赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^=</td>\n<td style=\"text-align:left\">按位异或赋值操作符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">|=</td>\n<td style=\"text-align:left\">按位或赋值操作符</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong>  <code>a 运算符= b</code>  的形式等价于 <code>a = a y运算符 b</code></p>\n<h3 id=\"条件运算\"><a class=\"anchor\" href=\"#条件运算\">#</a> 条件运算</h3>\n<p><strong>也称三元运算符</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>关系表达式<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>为真时的结果<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>为假时的结果<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*** 小例子 ***/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">?</span> <span class=\"token number\">5</span> <span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//s 的结果为 6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/***********/</span></pre></td></tr></table></figure><h3 id=\"运算符优先级\"><a class=\"anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h3>\n<p>如下表，从上往下优先级逐渐降低</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">关联性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">后缀</td>\n<td style=\"text-align:center\">()  []  .  (点操作符)</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">一元</td>\n<td style=\"text-align:center\">expr++  expr--</td>\n<td style=\"text-align:left\">从左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">一元</td>\n<td style=\"text-align:center\">++expr  --expr  +  -  ～  ！</td>\n<td style=\"text-align:left\">从右到左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">乘性</td>\n<td style=\"text-align:center\">*  /  ％</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">加性</td>\n<td style=\"text-align:center\">+  -</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">移位</td>\n<td style=\"text-align:center\">&gt;&gt;  &gt;&gt;&gt;  &lt;&lt;</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">关系</td>\n<td style=\"text-align:center\">&gt;  &gt;=  &lt;  &lt;=</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">相等</td>\n<td style=\"text-align:center\">==  !=</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">按位与</td>\n<td style=\"text-align:center\">＆</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">按位异或</td>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">按位或</td>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">逻辑与</td>\n<td style=\"text-align:center\">&amp;&amp;</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">逻辑或</td>\n<td style=\"text-align:center\">||</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">条件</td>\n<td style=\"text-align:center\">?  :</td>\n<td style=\"text-align:left\">从右到左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">赋值</td>\n<td style=\"text-align:center\">=  +=  -=  *=  /=  ％=  &gt;&gt;=  &lt;&lt;=  ＆=  ^=  |=</td>\n<td style=\"text-align:left\">从右到左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">逗号</td>\n<td style=\"text-align:center\">,</td>\n<td style=\"text-align:left\">左到右</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第一个java程序\"><a class=\"anchor\" href=\"#第一个java程序\">#</a> 第一个 Java 程序</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "java程序设计",
                "Java",
                "基础"
            ]
        },
        {
            "id": "https://skmcj.top/cpp/Dijkstra%E7%AE%97%E6%B3%95",
            "url": "https://skmcj.top/cpp/Dijkstra%E7%AE%97%E6%B3%95",
            "title": "Dijkstra算法",
            "date_published": "2021-08-05T16:00:00.000Z",
            "content_html": "<h1 id=\"dijkstra算法\"><a class=\"anchor\" href=\"#dijkstra算法\">#</a> Dijkstra 算法</h1>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>迪杰斯特拉算法 (Dijkstra) 是由荷兰计算机<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQTclOTElRTUlQUQlQTYlRTUlQUUlQjYvMTIxMDExNA==\">科学家</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOEIlODQlRTUlODUlOEIlRTYlOTYlQUYlRTclODklQjklRTYlOEIlODkvMjgyODg3Mg==\">狄克斯特拉</span>于 1959 年提出的，因此又叫狄克斯特拉算法。是从一个顶点到其余各顶点的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOUMlODAlRTclOUYlQUQlRTglQjclQUYlRTUlQkUlODQvNjMzNDkyMA==\">最短路径</span>算法，解决的是有权图中最短路径问题。迪杰斯特拉算法主要特点是从起始点开始，采用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQjQlQUElRTUlQkYlODMlRTclQUUlOTclRTYlQjMlOTUvNTQxMTgwMA==\">贪心算法</span>的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQUQlOTYlRTclOTUlQTUvNDAwNg==\">策略</span>，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止。</p>\n<p>Dijkstra 算法可用来求一个图中一个点到其他所有点的最短路径，时间复杂度为 O (n2)，可优化为 O (nlogn)。</p>\n<h3 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h3>\n<p><img data-src=\"https://gitee.com/skmcj-066/pic-bed/raw/master/img/20210808225823.png\" alt=\"案例\" height=\"350\" /></p>\n<p>如图，求源点 V1 到其它几个点的最短距离。</p>\n<h3 id=\"要点\"><a class=\"anchor\" href=\"#要点\">#</a> 要点</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> map<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 采用邻接链表的方式记录图信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> dis<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 用于存储源点到其它 n-1 个点的最短距离</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">bool</span> v<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>   <span class=\"token comment\">// 用于记录每个点的搜索状态，false 表示未搜</span></pre></td></tr></table></figure><p>从源点出发，每次找出 <code>dis</code>  中离源点最近的且未走过的点，替换出发点，更新 <code>dis</code>  的值。</p>\n<h3 id=\"算法详解\"><a class=\"anchor\" href=\"#算法详解\">#</a> 算法详解</h3>\n<p>首先用邻接矩阵存储图信息，如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> ∞ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞ <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> ∞<span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> ∞<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着初始化 <code>dis</code>  数组，此时 <code>dis[0, 8, 2, ∞, ∞, 5, ∞]</code></p>\n<p>一开始 <code>start = 1</code> ，令 <code>v[1] = 1</code>  表示 V1 点已搜；接着遍历 <code>dis</code>  数组，找出当前距离源点最近且未搜的点，这里为 V3 (距离为 2)，令 <code>start = 3</code> ， <code>v[3] = 1</code> ；然后更新 <code>dis</code>  数组 (当 <code>dis[start] + map[start][i] &lt; dis[i]</code>  时，更新 <code>dis[i]</code>  的值)，为 <code>dis[0, 8, 2, 5, ∞, 5, 6]</code> 。</p>\n<p>重复上述步骤，依次如下：</p>\n<p><code>start = 4</code> ，更新为 <code>dis[0, 7, 2, 5, 9, 5, 6]</code> <br />\n <code>start = 6</code> ，更新为 <code>dis[0, 7, 2, 5, 9, 5, 6]</code> <br />\n <code>start = 7</code> ，更新为 <code>dis[0, 7, 2, 5, 8, 5, 6]</code> <br />\n <code>start = 2</code> ，更新为 <code>dis[0, 7, 2, 5, 8, 5, 6]</code> <br />\n <code>start = 5</code> ，更新为 <code>dis[0, 7, 2, 5, 8, 5, 6]</code></p>\n<p>直到所有点都搜索过，此时 <code>dis</code>  数组即为源点 V1 到各个点的最短距离。</p>\n<h3 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//n 表示点的个数，m 表示边的个数，s 表示源点编号，这题为 1，mins 用于找出最小值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> mins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> mp<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dis<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">bool</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">10001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 表示 a 到 b 有一条权值为 c 的边</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        mp<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 无向边</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 记录当前未搜最近点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化 dis</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    v<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 记录初始点已走</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    dis<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化，源点到源点自然是 0</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> k <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        mins <span class=\"token operator\">=</span> <span class=\"token number\">0x7fffffff</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 令 mins 为极大值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 遍历找出当前距离源点最近且未搜的点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                mins <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                t <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 用 t 记下来</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        v<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 记录 t 点搜索状态</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 更新 dis</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dis<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>mp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> mp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 输出最终结果</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"案例测试\"><a class=\"anchor\" href=\"#案例测试\">#</a> 案例测试</h3>\n<p><strong>输入数据</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">7</span> <span class=\"token number\">9</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">6</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token number\">4</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token number\">7</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5</span> <span class=\"token number\">7</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p><strong>输出结果</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token number\">7</span> <span class=\"token number\">2</span> <span class=\"token number\">5</span> <span class=\"token number\">8</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span></pre></td></tr></table></figure>",
            "tags": [
                "C与C++算法设计",
                "C++",
                "算法",
                "图论算法"
            ]
        }
    ]
}